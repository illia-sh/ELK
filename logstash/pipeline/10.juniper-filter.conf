filter {

    if [message] =~ /RT_FLOW/ {

        grok {
        match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
        }

                date {
                match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
        if !("_grokparsefailure" in [tags]) {
        mutate {
                replace => [ "@source_host", "%{syslog_hostname}" ]
                replace => [ "msg", "%{syslog_message}" ]
        }
        }
        mutate {
                remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
	}
		grok {
		match => { "message" => "%{DATA:event}: session created %{IP:src_ip}/%{DATA:src_port}->%{IP:dst_ip}/%{DATA:dst_port} %{DATA:src_nat_rule} %{IP:src_nat_ip}/%{DATA:src_nat_port}->%{IP:dst_nat_ip}/%{DATA:dst_nat_port} None None %{INT:protocol_id} %{DATA:policy_name} %{DATA:src_zone} %{DATA:dst_zone} %{INT:session_id}\D+ %{DATA:interface} "}
		add_tag => ["RT_FLOW_SESSION"]
		}
	geoip {
      		source => "dst_ip"
      		target => "geoip"
          add_tag => [ "geoip" ]
    	}

      mutate {
              remove_field => [ "message" ]
              }
      }
}
