filter {
  grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{UUID:[lambda][request_id]}%{SPACE}%{GREEDYDATA:message_json}" }
      tag_on_failure => []
    }

    grok {
        match => { "message" => "(?:START|END) RequestId: %{UUID:[lambda][request_id]}" }
        tag_on_failure => []
    }

    grok {
        match => { "message" => "REPORT RequestId: %{UUID:[lambda][request_id]}\\tDuration: %{BASE16FLOAT:[lambda][duration]} ms\\tBilled Duration: %{BASE16FLOAT:[lambda][billed_duration]} ms \\tMemory Size: %{BASE10NUM:[lambda][memory_size]} MB\\tMax Memory Used: %{BASE10NUM:[lambda][memory_used]} MB" }
        tag_on_failure => []
    }

    mutate {
        convert => {
            "[lambda][duration]" => "integer"
            "[lambda][billed_duration]" => "integer"
            "[lambda][memory_size]" => "integer"
            "[lambda][memory_used]" => "integer"
        }
        add_tag => [ "lambda_filtered" ]
        remove_field => [ "message" ]
    }

  json {
      source => "message_json"
      skip_on_invalid_json => true
    }
}
